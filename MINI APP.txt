<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Crypto Tracker</title>
    
    <!-- Mini App Embed metadata -->
    <meta property="fc:miniapp" content="{
        &quot;name&quot;: &quot;Crypto Tracker&quot;,
        &quot;icon&quot;: &quot;https://your-domain.com/crypto-icon.png&quot;,
        &quot;homeUrl&quot;: &quot;https://your-domain.com&quot;,
        &quot;imageUrl&quot;: &quot;https://your-domain.com/crypto-preview.png&quot;,
        &quot;buttonTitle&quot;: &quot;📈 Voir les Prix&quot;,
        &quot;splashImageUrl&quot;: &quot;https://your-domain.com/crypto-splash.png&quot;,
        &quot;splashBackgroundColor&quot;: &quot;#7C3AED&quot;
    }">
    
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Inter', sans-serif;
            background: linear-gradient(135deg, #7C3AED 0%, #5B21B6 50%, #3B0764 100%);
            color: white;
            min-height: 100vh;
            overflow-x: hidden;
        }
        
        .header {
            text-align: center;
            padding: 24px 20px;
            background: rgba(255, 255, 255, 0.08);
            backdrop-filter: blur(20px);
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .header h1 {
            font-size: 28px;
            font-weight: 800;
            margin-bottom: 4px;
            background: linear-gradient(90deg, #FFFFFF 0%, #E4E4E7 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }
        
        .header p {
            font-size: 14px;
            opacity: 0.7;
            font-weight: 500;
        }
        
        .last-update {
            margin-top: 8px;
            font-size: 12px;
            opacity: 0.6;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 4px;
        }
        
        .pulse-dot {
            width: 6px;
            height: 6px;
            background: #10B981;
            border-radius: 50%;
            animation: pulse 2s ease-in-out infinite;
        }
        
        @keyframes pulse {
            0%, 100% { opacity: 1; transform: scale(1); }
            50% { opacity: 0.5; transform: scale(1.2); }
        }
        
        .main-content {
            padding: 24px 20px;
            max-width: 480px;
            margin: 0 auto;
        }
        
        .crypto-grid {
            display: flex;
            flex-direction: column;
            gap: 16px;
        }
        
        .crypto-card {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.15);
            border-radius: 20px;
            padding: 24px;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
            overflow: hidden;
        }
        
        .crypto-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 1px;
            background: linear-gradient(90deg, transparent 0%, rgba(255, 255, 255, 0.3) 50%, transparent 100%);
        }
        
        .crypto-card:hover {
            transform: translateY(-2px);
            background: rgba(255, 255, 255, 0.15);
            border-color: rgba(255, 255, 255, 0.25);
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
        }
        
        .crypto-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 16px;
        }
        
        .crypto-info {
            display: flex;
            align-items: center;
            gap: 12px;
        }
        
        .crypto-icon {
            width: 44px;
            height: 44px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 20px;
            font-weight: 700;
            color: white;
            background: linear-gradient(135deg, rgba(255, 255, 255, 0.2), rgba(255, 255, 255, 0.1));
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
        
        .crypto-details h3 {
            font-size: 18px;
            font-weight: 700;
            margin-bottom: 2px;
        }
        
        .crypto-symbol {
            font-size: 13px;
            opacity: 0.7;
            font-weight: 500;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        
        .price-section {
            display: flex;
            align-items: baseline;
            justify-content: space-between;
            flex-wrap: wrap;
            gap: 8px;
        }
        
        .price {
            font-size: 24px;
            font-weight: 800;
            font-variant-numeric: tabular-nums;
        }
        
        .change {
            display: flex;
            align-items: center;
            gap: 4px;
            font-size: 14px;
            font-weight: 600;
            padding: 4px 8px;
            border-radius: 8px;
            font-variant-numeric: tabular-nums;
        }
        
        .change.positive {
            background: rgba(16, 185, 129, 0.2);
            color: #10B981;
        }
        
        .change.negative {
            background: rgba(239, 68, 68, 0.2);
            color: #EF4444;
        }
        
        .loading {
            display: inline-block;
            width: 16px;
            height: 16px;
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top-color: white;
            animation: spin 1s ease-in-out infinite;
        }
        
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
        
        .error-state {
            text-align: center;
            padding: 40px 20px;
            color: rgba(255, 255, 255, 0.7);
        }
        
        .error-icon {
            font-size: 48px;
            margin-bottom: 16px;
            opacity: 0.5;
        }
        
        .refresh-button {
            background: rgba(255, 255, 255, 0.15);
            border: 1px solid rgba(255, 255, 255, 0.2);
            color: white;
            padding: 12px 24px;
            border-radius: 12px;
            font-size: 14px;
            font-weight: 600;
            cursor: pointer;
            margin-top: 16px;
            transition: all 0.2s ease;
        }
        
        .refresh-button:hover {
            background: rgba(255, 255, 255, 0.25);
            transform: translateY(-1px);
        }
        
        .footer {
            text-align: center;
            padding: 20px;
            margin-top: 24px;
        }
        
        .add-button {
            background: linear-gradient(135deg, rgba(255, 255, 255, 0.2), rgba(255, 255, 255, 0.1));
            border: 1px solid rgba(255, 255, 255, 0.25);
            color: white;
            padding: 14px 32px;
            border-radius: 14px;
            font-size: 15px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
        }
        
        .add-button:hover {
            background: linear-gradient(135deg, rgba(255, 255, 255, 0.3), rgba(255, 255, 255, 0.2));
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
        }
        
        @media (max-width: 480px) {
            .main-content {
                padding: 20px 16px;
            }
            
            .crypto-card {
                padding: 20px;
            }
            
            .header {
                padding: 20px 16px;
            }
            
            .price {
                font-size: 22px;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>📈 Crypto Tracker</h1>
        <p>Prix en temps réel des cryptomonnaies</p>
        <div class="last-update">
            <div class="pulse-dot"></div>
            <span id="lastUpdate">Chargement...</span>
        </div>
    </div>
    
    <div class="main-content">
        <div id="cryptoGrid" class="crypto-grid">
            <!-- Bitcoin -->
            <div class="crypto-card">
                <div class="crypto-header">
                    <div class="crypto-info">
                        <div class="crypto-icon">₿</div>
                        <div class="crypto-details">
                            <h3>Bitcoin</h3>
                            <div class="crypto-symbol">BTC</div>
                        </div>
                    </div>
                </div>
                <div class="price-section">
                    <div class="price" id="btc-price">
                        <span class="loading"></span>
                    </div>
                    <div class="change" id="btc-change">-</div>
                </div>
            </div>
            
            <!-- Ethereum -->
            <div class="crypto-card">
                <div class="crypto-header">
                    <div class="crypto-info">
                        <div class="crypto-icon">Ξ</div>
                        <div class="crypto-details">
                            <h3>Ethereum</h3>
                            <div class="crypto-symbol">ETH</div>
                        </div>
                    </div>
                </div>
                <div class="price-section">
                    <div class="price" id="eth-price">
                        <span class="loading"></span>
                    </div>
                    <div class="change" id="eth-change">-</div>
                </div>
            </div>
            
            <!-- Solana -->
            <div class="crypto-card">
                <div class="crypto-header">
                    <div class="crypto-info">
                        <div class="crypto-icon">◎</div>
                        <div class="crypto-details">
                            <h3>Solana</h3>
                            <div class="crypto-symbol">SOL</div>
                        </div>
                    </div>
                </div>
                <div class="price-section">
                    <div class="price" id="sol-price">
                        <span class="loading"></span>
                    </div>
                    <div class="change" id="sol-change">-</div>
                </div>
            </div>
        </div>
        
        <div id="errorState" class="error-state" style="display: none;">
            <div class="error-icon">⚠️</div>
            <p>Impossible de charger les prix</p>
            <button class="refresh-button" onclick="fetchPrices()">
                🔄 Réessayer
            </button>
        </div>
    </div>
    
    <div class="footer">
        <button id="addToFarcaster" class="add-button">
            ⭐ Ajouter aux Favoris
        </button>
    </div>

    <script>
        let sdk;
        let pricesData = {};
        
        // Configuration des cryptos
        const cryptoConfig = {
            'bitcoin': { id: 'btc', symbol: 'BTC' },
            'ethereum': { id: 'eth', symbol: 'ETH' },
            'solana': { id: 'sol', symbol: 'SOL' }
        };
        
        // Initialisation de l'application
        async function initApp() {
            try {
                // Chargement du SDK Farcaster
                const { sdk: farcasterSdk } = await import('https://unpkg.com/@farcaster/miniapp-sdk@1.0.0/dist/index.js');
                sdk = farcasterSdk;
                
                // Signaler que l'app est prête
                await sdk.actions.ready();
                console.log('🚀 Crypto Tracker initialisé');
                
                // Configurer les événements
                setupEventListeners();
                
            } catch (error) {
                console.error('❌ Erreur SDK Farcaster:', error);
                // Continuer sans le SDK si erreur
            }
            
            // Charger les prix dans tous les cas
            await fetchPrices();
            
            // Mettre à jour les prix toutes les 30 secondes
            setInterval(fetchPrices, 30000);
        }
        
        // Récupérer les prix des cryptomonnaies
        async function fetchPrices() {
            try {
                console.log('📊 Récupération des prix...');
                
                // Utilisation de l'API CoinGecko (gratuite, pas de clé requise)
                const response = await fetch('https://api.coingecko.com/api/v3/simple/price?ids=bitcoin,ethereum,solana&vs_currencies=usd&include_24hr_change=true');
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const data = await response.json();
                pricesData = data;
                
                // Mettre à jour l'interface
                updatePricesUI(data);
                updateLastUpdate();
                
                // Masquer l'état d'erreur si visible
                document.getElementById('errorState').style.display = 'none';
                document.getElementById('cryptoGrid').style.display = 'flex';
                
                console.log('✅ Prix mis à jour:', data);
                
            } catch (error) {
                console.error('❌ Erreur récupération prix:', error);
                showErrorState();
            }
        }
        
        // Mettre à jour l'interface avec les nouveaux prix
        function updatePricesUI(data) {
            Object.keys(cryptoConfig).forEach(coinId => {
                const config = cryptoConfig[coinId];
                const coinData = data[coinId];
                
                if (coinData) {
                    // Prix
                    const priceElement = document.getElementById(`${config.id}-price`);
                    const formattedPrice = formatPrice(coinData.usd);
                    priceElement.innerHTML = `$${formattedPrice}`;
                    
                    // Changement 24h
                    const changeElement = document.getElementById(`${config.id}-change`);
                    const change24h = coinData.usd_24h_change;
                    
                    if (change24h !== undefined) {
                        const formattedChange = Math.abs(change24h).toFixed(2);
                        const isPositive = change24h >= 0;
                        
                        changeElement.className = `change ${isPositive ? 'positive' : 'negative'}`;
                        changeElement.innerHTML = `
                            <span>${isPositive ? '↗' : '↘'}</span>
                            <span>${formattedChange}%</span>
                        `;
                    } else {
                        changeElement.innerHTML = '-';
                        changeElement.className = 'change';
                    }
                }
            });
        }
        
        // Formater le prix selon sa valeur
        function formatPrice(price) {
            if (price >= 1000) {
                return new Intl.NumberFormat('en-US', {
                    minimumFractionDigits: 0,
                    maximumFractionDigits: 0
                }).format(price);
            } else if (price >= 1) {
                return new Intl.NumberFormat('en-US', {
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2
                }).format(price);
            } else {
                return new Intl.NumberFormat('en-US', {
                    minimumFractionDigits: 4,
                    maximumFractionDigits: 4
                }).format(price);
            }
        }
        
        // Mettre à jour l'heure de dernière mise à jour
        function updateLastUpdate() {
            const now = new Date();
            const timeString = now.toLocaleTimeString('fr-FR', {
                hour: '2-digit',
                minute: '2-digit',
                second: '2-digit'
            });
            document.getElementById('lastUpdate').textContent = `Mis à jour à ${timeString}`;
        }
        
        // Afficher l'état d'erreur
        function showErrorState() {
            document.getElementById('errorState').style.display = 'block';
            document.getElementById('cryptoGrid').style.display = 'none';
        }
        
        // Configurer les événements
        function setupEventListeners() {
            // Bouton ajouter aux favoris
            document.getElementById('addToFarcaster').addEventListener('click', async () => {
                const button = document.getElementById('addToFarcaster');
                const originalText = button.textContent;
                
                try {
                    button.textContent = '⏳ Ajout...';
                    
                    if (sdk) {
                        await sdk.actions.addMiniApp();
                        button.textContent = '✅ Ajouté !';
                    } else {
                        throw new Error('SDK non disponible');
                    }
                    
                    setTimeout(() => {
                        button.textContent = originalText;
                    }, 2000);
                    
                } catch (error) {
                    console.error('❌ Erreur ajout aux favoris:', error);
                    button.textContent = '❌ Erreur';
                    
                    setTimeout(() => {
                        button.textContent = originalText;
                    }, 2000);
                }
            });
            
            // Actualisation au clic sur les cartes
            document.querySelectorAll('.crypto-card').forEach(card => {
                card.addEventListener('click', () => {
                    fetchPrices();
                });
            });
        }
        
        // Démarrer l'application au chargement de la page
        document.addEventListener('DOMContentLoaded', () => {
            console.log('🚀 Démarrage de Crypto Tracker...');
            initApp();
        });
        
        // Gestion de la visibilité de la page (actualiser quand on revient)
        document.addEventListener('visibilitychange', () => {
            if (!document.hidden) {
                fetchPrices();
            }
        });
        
        // Gestion des erreurs globales
        window.addEventListener('error', (event) => {
            console.error('❌ Erreur globale:', event.error);
        });
        
        // Logging pour debug
        console.log('📈 Crypto Tracker Mini App chargé');
    </script>
</body>
</html>